
// Generated by CoffeeScript 1.8.0
(function() {
  var defineController;

  define('forum', ['forum/components/components_loader'], function(loader) {
    var doc_plugin, loadComponentModel;
    doc_plugin = {
      type: 'plugin',
      title: 'Forum',
      anchor: '#/forum',
      _models: {},
      name: 'forum',
      version: 1.0,
      forumModels: {},
      icon: 'icon-comment',

      /*
         These model fields are used for listing and ordering
         models. You don't need to add them to 'some_component/index.coffee'
         and they will be auto appended to component models
       */
      default_model_fields: ["userid", "created_at", "timestamp"],
      init: function() {
        var models, primaryChain, self;
        self = this;
        models = [
          {
            name: "Topic",
            attrs: ["name", "link", "rss", 'file_id', "pinned", "comments", "text", "userid", 'attachment', "created_at", "timestamp"]
          }, {
            name: "Link",
            attrs: ["name", "link", "rss", "comments", "pinned", "text", "userid", "created_at", "timestamp"]
          }, {
            name: "Comment",
            attrs: ["name", "post_id", "content", "userid", "replies", 'attachment', "created_at", "timestamp"]
          }, {
            name: 'Bookmark',
            attrs: ['post_id', 'user_id', 'create_date']
          }
        ];
        primaryChain = models.reduce(function(chain, currentModel) {
          var init_model;
          init_model = function(config) {
            var dtd;
            dtd = $.Deferred();
            return foundry.model(config.name, config.attrs, function(model) {
              self.forumModels[config.name] = model;
              return dtd.resolve();
            });
          };
          return chain.pipe(init_model(currentModel));
        }, $.Deferred().resolve());
        primaryChain.pipe(function() {

          /*
            use JQuery deferred chain to load all models of 
            all components asynchronously
           */
          var chain;
          chain = loader.components.reduce(function(deferredChain, currentComponent) {
            return deferredChain.pipe(loadComponentModel(currentComponent));
          }, $.Deferred().resolve());
          return chain.pipe(function() {
            return foundry.initialized(self.name);
          }).fail(function(error) {
            return console.err(error);
          });
        }).fail(function(error) {
          return console.log(error);
        });
      },
      add_post: function(data) {
        var model;
        console.log('adding post for other plugin');
        model = foundry._models.Topic;
        return model.create(data);
      },
      my_posts: function() {
        return console.log('get all my own posts');
      },
      inited: function() {
        var user, _i, _len, _ref, _results;
        defineController(loader.components);
        _ref = foundry._models.User.all();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          if (user.pid === foundry._current_user.id) {
            if (!user.rated && foundry._models.Topic.all().length > 20) {
              foundry._plugins.forum.prompt_rating();
              user.rated = true;
              user.save();
            }
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      add_intial_post: function() {
        var data_use, data_welcome, post_model;
        post_model = foundry._models.Topic;
        data_welcome = {
          name: 'Welcome to Forum',
          text: '<b>Forum is a collaborative workspace where your team can:<br><br></b><ul><li>Share interesting links or news</li><li><b></b>Post discussion topics or ideas</li><li>Comment and reply to posts, creating an ongoing conversation</li><li>Upload and share files or documents to read and work on</li></ul><b>Forum<br><br></b>Forum is where all the action happens. This is where you can see all the posts and their relevant facts: who posted it, when it was posted and how many comments it has.<br><br><img src="http://i.imgur.com/CA1Bs1M.png" title="Image: http://i.imgur.com/CA1Bs1M.png"><br><br><b>With Forum, you can compose three types of posts:<br></b><br><ul><li>Links with titles</li><li>Posts with texts and pictures</li><li>Files uploaded from desktop or cloud</li></ul><b>Document<br><br></b>In the Document section, you and your team can upload files for the group to view or edit. The document section also lists any documents uploaded on the Forum.<br><br><b>Users<br><br></b><b></b>Here you can see all the members of the team who have access to the posts and documents in the current workspace. If you are an admin of the workspace, you can:<br><br><ul><li>Grant other users "admin" status</li><li>Add users simply by adding their emails</li><li>Delete users who are no longer part of the group with one simple click</li></ul><b>Workspace<br><br></b>Managing and community with different groups is painful. With Forum, it' + "'" + 's never been easier. Workspace allows users to divide their work into projects or teams, each one its own separate Workspace. Within each workspace, you can make posts on the forum, add users and upload documents. And if you want to go from one workspace to another, just click "Switch" and choose the next workspace.<br><br><b>Feedback and Questions<br><br></b>If you have any questions or want to leave feedback, you can email us at admin@nimbusbase.com. Thanks!<br><br>',
          rss: false,
          userid: 10000,
          created_at: Date().toString(),
          timestamp: new Date().getTime()
        };
        data_use = {
          name: 'Add Your Team to Forum!',
          text: '<div><b>Forum makes collaboration within a group or an organization easy. So let' + "'" + 's get the rest of the team on board!</b><br><br><b>1.&nbsp;First, you go to the "User" tab, where all the current users are displayed,&nbsp;and click "Add User":</b><img alt="" src="http://i.imgur.com/flnP6ES.png" title="Image: http://i.imgur.com/flnP6ES.png"><br><br><b>2. Next, you fill out the user form by adding the team member' + "'" + 's email and assigning the user as&nbsp;either an "Admin" or "Viewer". Admins can add or delete other users and edit other users' + "'" + ' posts:</b><br><img alt="" src="http://i.imgur.com/YTVYmIC.png" title="Image: http://i.imgur.com/YTVYmIC.png"><br><br><b>3. Once you have added the user, the user gets a notification in his inbox that he has been added to the team and can view the workspace&nbsp;(in this case, the name of the workspace is "For Tutorial"):</b><br><img alt="" src="http://i.imgur.com/XI1dzeP.png" title="Image: http://i.imgur.com/XI1dzeP.png"><br><br><b>4. The user can access the workspace simply by clicking on the link and "Open with app":</b><br><img alt="" src="http://i.imgur.com/6oMiufU.png" title="Image: http://i.imgur.com/6oMiufU.png"><br><br><b>5. ..and voila! The user is added to the team and can start contributing posts and comments!:&nbsp;</b><br><img alt="" src="http://i.imgur.com/eQQbuB6.png" title="Image: http://i.imgur.com/eQQbuB6.png"><br></div>',
          rss: false,
          userid: 10000,
          created_at: Date().toString(),
          timestamp: new Date().getTime()
        };
        if (!post_model.findByAttribute('name', data_welcome.name)) {
          this.add_post(data_welcome);
        }
        if (!post_model.findByAttribute('name', data_use.name)) {
          return this.add_post(data_use);
        }
      },
      prompt_rating: function() {
        var msg;
        msg = "<div style='padding:20px 10px;'>Thanks for using Forum this far, hope you can rate us at Chrome Web Store, helps us make it better.</div>";
        return bootbox.dialog({
          message: msg,
          title: 'Rating please',
          className: 'nimbus_confirm_modal',
          buttons: {
            success: {
              label: "Rate it Now",
              className: 'btn-success',
              callback: function(evt) {
                window.open('https://chrome.google.com/webstore/detail/forum/knpdbggaikbgjbgihfgefcjdabkhfgbp?utm_source=chrome-ntp-icon');
                return bootbox.hideAll();
              }
            },
            cancel: {
              className: 'btn-danger',
              callback: function(evt) {
                console.log('go away');
                return bootbox.hideAll();
              }
            }
          }
        });
      }
    };

    /*
      input: component
      output: deferred object that can be added more asynchronous operations
      function: given a component, load all models related to it
     */
    loadComponentModel = function(component) {
      return component.models.reduce(function(deferredChain, currentModel) {
        return deferredChain.pipe(function() {
          var dtd;
          dtd = $.Deferred();
          return foundry.model(currentModel.name, currentModel.fields.concat(doc_plugin['default_model_fields']), function() {
            return dtd.resolve();
          });
        });
      }, $.Deferred().resolve());
    };
    return doc_plugin;
  });


  /*
    input: components
    output: angular Forum controller
    function: define Forum Controller
      this function will be called in the 'inited' callback,
      replace
        "ForumController = (...) -> " 
      with
        "foundryModule.controller('ForumController',[..., ()->])"
      this will be good for future js minification
   */

  defineController = function(components) {
    var foundryModule;
    foundryModule = angular.module('foundry');
    return foundryModule.controller('ForumController', [
      '$scope', '$rootScope', '$foundry', '$filter', function($scope, $rootScope, $foundry, $filter) {
        var check_for_forum_init, comment_action, comment_model, component, componentsMap, current_user, findComponentByTopicModelInstanceInComponents, forum_module, generate_comment_template, generate_file_template, generate_link_template, generate_post_template, initComponentScope, link_model, model, name, notify_author, notify_other_user, topic_model, upload_attachment, _i, _j, _k, _len, _len1, _len2, _ref;
        $rootScope.breadcum = 'Forums';
        $scope.topic_model = foundry._models.Topic;
        $scope.link_model = foundry._models.Link;
        $scope.comment_model = foundry._models.Comment;
        $scope.searchPlaceHolder = "Search";

        /*
          add update handler for this
         */
        _ref = foundry._plugins['forum'].forumModels;
        for (name in _ref) {
          model = _ref[name];
          model.onUpdate(function(mode, obj, isLocal) {
            $scope.load();
            if (!isLocal) {
              return $scope.$apply();
            }
          });
        }

        /*
          init components in $scope
         */
        $scope.components = components;
        componentsMap = {};
        for (_i = 0, _len = components.length; _i < _len; _i++) {
          component = components[_i];
          componentsMap[component.name] = component;
        }
        $scope.componentsMap = componentsMap;

        /*
          input: component
          output: 
          function: init component scope
        
          under the Forum $scope, create private component scope for
          each component, and also add form config for each component
          to the Forum $scope, these form configs are used by the 
          'model-form' directive
         */
        $scope.componentScope = {};
        initComponentScope = function(component) {
          $scope.componentScope[component.name] = $scope.$new();
          component.formConfig.create = "componentCreator(componentsMap['" + component.name + "'])()";
          component.formConfig.update = 'update()';
          component.formConfig.disabled = false;
          $scope["" + component.name + "_config"] = component.formConfig;
        };
        for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
          component = components[_j];
          initComponentScope(component);
        }
        $scope.showing = false;
        $scope.new_comment = '';
        $scope.comments = [];
        $scope.current_user = current_user = foundry._current_user;
        $scope.user_permission = foundry._models.User.findByAttribute('pid', current_user.id).role;
        forum_module = foundry._plugins.forum;

        /*
          input: none
          output: none
          function: check for owner if has initialized this
         */
        check_for_forum_init = function() {
          var owner_id, user;
          owner_id = Nimbus.realtime.c_file.owners[0].permissionId;
          user = foundry._models.User.findByAttribute('pid', owner_id);
          if (!user.initied) {
            forum_module.add_intial_post();
            user.initied = 1;
            return user.save();
          }
        };
        check_for_forum_init();

        /*
        for upload post
         */
        $scope.upload_post = null;
        $scope.$watch('upload_post', function(n, o) {
          var spinner;
          if (n) {
            spinner = $foundry.spinner({
              type: 'loading',
              text: 'Uploading '
            });
            $scope.uplading_file = true;
            Nimbus.Binary.upload_file(n, function(f) {
              var data, file, html;
              foundry._plugins.document.set(f._file.id, f._file);
              file = f._file;
              html = '<div class="user_listing"><i class="file_thumb" style="background-image:url(' + (file.thumbnailLink || file.iconLink) + ');"></i><a href="' + file.webContentLink + '"><span class="name ng-binding">' + file.title + '</span></a></div>';
              data = {
                name: file.title,
                rss: false,
                file_id: file.id,
                userid: foundry._current_user.id,
                created_at: Date().toString(),
                timestamp: new Date().getTime(),
                text: html
              };
              topic_model.create(data);
              $scope.uplading_file = false;
              spinner.hide();
              $scope.load();
              $scope.$apply();
            });
          }
        });

        /*
        comment with picture
         */
        $scope.upload_comment = null;
        $scope.uplading_file = false;
        $scope.clear_input = function() {
          return $scope.upload_comment = null;
        };

        /*
         pagination for post
         */
        $scope.total_post = 0;
        $scope.current_page = 1;
        $scope.post_per_page = 15;
        $scope.load_next_page = function() {
          if ($scope.current_page * $scope.post_per_page < $scope.total_post) {
            $scope.current_page++;
            return $scope.load();
          }
        };
        $scope.load_next_search_page = function() {
          if ($scope.currentSearchPage * $scope.post_per_page < $scope.total_search_post) {
            $scope.currentSearchPage++;
            return $scope.searchLoad();
          }
        };
        $scope.is_there_more_posts = function() {
          if ($scope.inSearchMode === true) {
            return false;
          }
          return $scope.current_page * $scope.post_per_page < $scope.total_post;
        };
        $scope.is_there_more_search_posts = function() {
          if ($scope.inSearchMode === false) {
            return false;
          } else {
            return $scope.currentSearchPage * $scope.post_per_page < $scope.total_search_post;
          }
        };
        $scope.displayed_topic = {};
        $scope.change_display = function(item, index) {
          if ($scope.topics.length === 0) {
            $scope.showing = false;
            return;
          }
          $scope.showing = true;
          $scope.displayed_topic = $scope.topics[index];
          $scope.displayed_attachment = $scope.get_attachment($scope.displayed_topic.attachment);
          $scope.reply_mode = false;
          $scope.current_index = index;
          $scope.new_comment = '';
          $scope.get_topic_comment($scope.displayed_topic);
          $scope.upload_comment = null;
          $('input.comment-image-input').replaceWith($('input.comment-image-input').val('').clone(true));

          /*
            if display changes to any component defined
            under the components structure, then call the component's 
            'onViewLoaded' callback and inject the 'displayed_topic' object
            to it's component scope
           */
          component = findComponentByTopicModelInstanceInComponents($scope.displayed_topic);
          if (component) {
            $scope.componentScope[component.name].displayed_topic = $scope.displayed_topic;
            component.onViewLoaded.apply({}, [$scope.componentScope[component.name]]);
          }
        };
        $scope.navigateToTopic = function(topic) {
          var idx, t, target, _k, _len2, _ref1;
          target = 0;
          _ref1 = $scope.topics;
          for (idx = _k = 0, _len2 = _ref1.length; _k < _len2; idx = ++_k) {
            t = _ref1[idx];
            if (topic.id === t.id) {
              target = idx;
            }
          }
          return $scope.change_display(null, target);
        };

        /*
          function : pin a post to make it displayed at the very top of the list
          input    : the post to be pinned
         */
        $scope.pin_post = function(post) {
          post.pinned = 1;
          post.save();
          return $scope.load();
        };

        /*
          this is the opposite to pin a post
         */
        $scope.unpin_post = function(post) {
          post.pinned = void 0;
          post.save();
          return $scope.load();
        };
        $scope.get_topic_comment = function(topic) {
          var comments;
          if (topic) {
            comments = comment_model.findAllByAttribute('post_id', topic.id);
            return $scope.comments = $filter('orderBy')(comments, 'timestamp', true);
          }
        };
        $scope.get_topic_comment_count = function(topic) {
          var comments;
          comments = comment_model.findAllByAttribute('post_id', topic.id);
          return comments.length;
        };
        $scope.delete_comment = function(index, comment) {
          comment.destroy();
          return $scope.get_topic_comment($scope.displayed_topic);
        };
        $scope.comment_editable = function(index) {
          return console.log('check permission');
        };

        /*
          reply comment
         */
        $scope.reply_mode = false;
        $scope.reply_comment = function(comment, index) {
          $scope.reply_mode = true;
          $scope.current_comment = comment;
          console.log('reply this comment');
          if (index >= 0) {
            $scope.new_comment = '@' + comment.replies[index].name + ': ';
          } else {
            $scope.new_comment = '@' + comment.name + ': ';
          }
          $('#comment_box').focus();
        };
        $scope.remove_reply = function(index, comment) {
          comment.replies.splice(index, 1);
          return comment.save();
        };

        /*
         load method for general
         */
        topic_model = $scope.topic_model;
        link_model = $scope.link_model;
        comment_model = $scope.comment_model;

        /*
          input: topic model instance
          output: component related to it
          function: one component only have one topic model
            find the component by topic model instance in components array,
            if it find nothing, then returns undefined
         */
        findComponentByTopicModelInstanceInComponents = function(instance) {
          var result;
          result = components.filter(function(component) {
            return component.topicModel === instance.type;
          });
          return result[0];
        };
        $scope.normalLoad = function() {
          var id, links, pins, posts, to_show_post, topicModelInstances, topics;
          posts = topic_model.all();
          links = link_model.all();
          pins = foundry._models.Bookmark.all();
          topicModelInstances = components.reduce(function(instances, component) {
            return instances.concat(foundry._models[component.topicModel].all());
          }, []);
          $scope.total_post = posts.length + links.length + topicModelInstances.length;
          topics = $filter('orderBy')(posts.concat(links).concat(topicModelInstances), ['pinned', '-timestamp']);
          if (Object.keys($scope.displayed_topic).length) {
            id = $scope.displayed_topic.id;
            if ($scope.displayed_topic.rss) {
              $scope.displayed_topic = link_model.findByAttribute('id', id);
            } else if ($scope.displayed_topic.file_id) {
              $scope.displayed_topic = topic_model.findByAttribute('id', id);
            } else {
              component = findComponentByTopicModelInstanceInComponents($scope.displayed_topic);
              if (component) {
                $scope.displayed_topic = foundry._models[component.topicModel].findByAttribute('id', id);
              } else {
                $scope.displayed_topic = topic_model.findByAttribute('id', id);
              }
            }
            $scope.get_topic_comment($scope.displayed_topic);
          }
          to_show_post = null;
          $scope.topics = topics.slice(0, $scope.current_page * $scope.post_per_page);
          angular.forEach(topics, function(value, key) {
            if (localStorage.to_open_topic && value.id === localStorage.to_open_topic) {
              to_show_post = value;
              $scope.change_display(value, key);
              delete localStorage.to_open_topic;
            }
            if ($scope.displayed_topic) {
              if (value.id === $scope.displayed_topic.id) {
                return $scope.current_index = key;
              }
            }
          });
        };
        $scope.searchLoad = function() {
          var id, lastSearch, links, orderedTopics, pins, posts, to_show_post, topicModelInstances, topics;
          lastSearch = $scope.lastSearch;
          $scope.lastSearch = $scope.keyword;
          $scope.inSearchMode = true;
          if (lastSearch === "") {
            if ($scope.keyword === "") {
              $scope.inSearchMode = false;
              return;
            }
          } else if ($scope.keyword === "") {
            $scope.inSearchMode = false;
            $scope.currentSearchPage = 1;
            $scope.normalLoad();
            return;
          }
          if (lastSearch !== $scope.keyword) {
            $scope.currentSearchPage = 1;
          }
          posts = topic_model.all();
          links = link_model.all();
          pins = foundry._models.Bookmark.all();
          topicModelInstances = components.reduce(function(instances, component) {
            return instances.concat(foundry._models[component.topicModel].all());
          }, []);
          $scope.total_post = posts.length + links.length + topicModelInstances.length;
          orderedTopics = $filter('orderBy')(posts.concat(links).concat(topicModelInstances), ['pinned', '-timestamp']);
          topics = $filter('filter')(orderedTopics, function(value) {
            if (value.name && value.name.toLowerCase().indexOf($scope.keyword.toLowerCase()) !== -1) {
              return true;
            } else if (value.text && $("<div/>").html(value.text).text().toLowerCase().indexOf($scope.keyword.toLowerCase()) !== -1) {
              return true;
            } else {
              return false;
            }
          });
          $scope.total_search_post = topics.length;
          if (Object.keys($scope.displayed_topic).length) {
            id = $scope.displayed_topic.id;
            if ($scope.displayed_topic.rss) {
              $scope.displayed_topic = link_model.findByAttribute('id', id);
            } else if ($scope.displayed_topic.file_id) {
              $scope.displayed_topic = topic_model.findByAttribute('id', id);
            } else {
              component = findComponentByTopicModelInstanceInComponents($scope.displayed_topic);
              if (component) {
                $scope.displayed_topic = foundry._models[component.topicModel].findByAttribute('id', id);
              } else {
                $scope.displayed_topic = topic_model.findByAttribute('id', id);
              }
            }
            $scope.get_topic_comment($scope.displayed_topic);
          }
          to_show_post = null;
          $scope.topics = topics.slice(0, $scope.currentSearchPage * $scope.post_per_page);
          angular.forEach(topics, function(value, key) {
            if (localStorage.to_open_topic && value.id === localStorage.to_open_topic) {
              to_show_post = value;
              $scope.change_display(value, key);
              delete localStorage.to_open_topic;
            }
            if ($scope.displayed_topic) {
              if (value.id === $scope.displayed_topic.id) {
                return $scope.current_index = key;
              }
            }
          });
        };
        $scope.$watch('keyword', function(newValue, oldValue) {
          if (newValue === "" && typeof oldValue === 'string' && oldValue.length > 0) {
            return $scope.searchLoad();
          }
        });
        $scope.load = function() {
          if ($scope.inSearchMode) {
            return $scope.searchLoad();
          } else {
            return $scope.normalLoad();
          }
        };
        $scope.topic_data = {};
        $scope.inSearchMode = false;
        $scope.currentSearchPage = 1;
        $scope.lastSearch = "";
        $scope.topic_config = {
          fields: {
            name: {
              type: 'input',
              label: 'Name'
            },
            text: {
              hide: 'topic_data.rss',
              label: 'Content',
              type: 'editor'
            }
          },
          create: 'submit()',
          update: 'update()',
          disabled: false
        };
        $scope.topic_edit_config = {};
        angular.copy($scope.topic_config, $scope.topic_edit_config);

        /*
          for file type post
         */
        $scope.file_config = {};
        $scope.file_edit_config = {};
        angular.copy($scope.topic_config, $scope.file_config);
        delete $scope.file_config.fields['text'];
        $scope.file_config.create = 'create_file()';
        $scope.file_config.update = 'update_file()';
        angular.copy($scope.file_config, $scope.file_edit_config);
        $scope.file_config.fields.attachment = {
          label: 'File',
          type: 'file',
          choosed: 'files_choosed()'
        };
        $scope.files_choosed = function(file) {
          return console.log(file);
        };
        $scope.add_file_shortcut = function(file) {
          $scope.topic_data = {};
          $scope.form_mode = 'create';
          $('.file_modal').modal();
        };
        $scope.create_file = function() {
          var spinner;
          console.log('creating..');
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Uploading... '
          });
          upload_attachment($scope.topic_data.attachment, function(file) {
            $scope.topic_data.attachment = file.file_id;
            $scope.submit();
            spinner.hide();
            return $scope.$apply();
          });
        };
        $scope.update_file = function() {
          $scope.displayed_topic.save();
          $('.modal').modal('hide');
        };

        /*
          for link type post
         */
        $scope.link_config = {
          fields: {
            link: {
              label: 'Link',
              type: 'input'
            },
            name: {
              type: 'input',
              label: 'Name'
            }
          },
          create: 'create_link()',
          update: 'update_link()',
          disabled: false
        };
        $scope.add_shortcut = function() {
          var postEditor;
          $scope.topic_data = {};
          $scope.form_config = $scope.topic_config;
          $scope.form_mode = 'create';
          $('.form').modal();
          postEditor = $(".form").find("textarea").data("wysihtml5").editor;
          postEditor.composer.setHistory([postEditor.composer.getValue()]);
        };
        $scope.add_link_shortcut = function() {
          $scope.topic_data = {};
          $scope.form_config = $scope.link_config;
          $scope.form_mode = 'create';
          $('.link_post').modal();
        };
        $scope.edit_shortcut = function(displayed_topic) {
          var postEditor, textarea;
          $scope.form_mode = 'edit';
          if (displayed_topic.rss) {
            $('.update_link').modal();
          } else {
            if (displayed_topic.attachment) {
              $('.update_file').modal();
            } else if (component = findComponentByTopicModelInstanceInComponents(displayed_topic)) {
              $("." + component.view.updateModal.cssClass).modal();
              textarea = $("." + component.view.updateModal.cssClass).find("textarea");
              if (textarea.length > 0 && typeof textarea.data("wysihtml5") !== 'undefined') {
                postEditor = textarea.data("wysihtml5").editor;
                postEditor.composer.setHistory([postEditor.composer.getValue()]);
              }
            } else {
              $('.update').modal();
              postEditor = $(".update").find("textarea").data("wysihtml5").editor;
              postEditor.composer.setHistory([postEditor.composer.getValue()]);
              console.log;
            }
          }
        };
        $scope.clear = function() {
          $('.modal').modal('hide');
          $scope.topic_data = {};
          $scope.load();
        };

        /*
          input: none
          ouput: none
          function: add post or file
         */
        $scope.submit = function() {
          var created_item, me, user_model, x;
          console.log("SUBMIT CALLED");
          x = $scope.topic_data;
          x.rss = false;
          x.userid = foundry._current_user.id;
          x.created_at = Date().toString();
          x.timestamp = new Date().getTime();
          created_item = topic_model.create(x);
          x.id = created_item.id;
          $scope.topic_data = {};
          if (x.attachment) {
            x.attachment_link = foundry._plugins.document.get(x.attachment).webContentLink;
            notify_other_user(3, x);
          } else {
            notify_other_user(1, x);
          }
          $scope.load();
          $scope.navigateToTopic(created_item);
          $('.modal').modal('hide');
          user_model = foundry._models.User;
          me = user_model.findByAttribute('pid', foundry._current_user.id);
          if (topic_model.all().length > 10 && !me.rated) {
            me.rated = true;
            me.save();
            foundry._plugins.forum.prompt_rating();
          }
        };

        /*
          input: none
          ouput: none
          function: add link
         */
        $scope.create_link = function() {
          var created_item, reset_content, spinner, x;
          created_item = {
            'id': null
          };
          console.log("SUBMIT CALLED");
          x = $scope.topic_data;
          x.rss = true;
          x.userid = foundry._current_user.id;
          x.created_at = Date().toString();
          x.timestamp = new Date().getTime();
          if (x.link.indexOf('http') === -1) {
            x.link = 'http://' + x.link;
          }
          reset_content = function() {
            $scope.load();
            $scope.topic_data = {};
            $scope.navigateToTopic(created_item);
            return $('.modal').modal('hide');
          };
          if (x.name) {
            x.id = link_model.create(x).id;
            notify_other_user(2, x);
            reset_content();
          } else {
            spinner = $foundry.spinner({
              type: 'loading',
              text: 'Fetching '
            });
            $('.close').on('click', function(evt) {
              return spinner.hide();
            });
            $foundry.rss(x.link, function(data, error) {
              if (!error) {
                if ($(data).find('encoded').text()) {
                  x.text = $(data).find('encoded').text();
                } else if ($(data).find('content').length && $(data).find('content').eq(0).prop('tagName') !== "media:content") {
                  x.text = $(data).find('content').text();
                } else {
                  x.text = $(data).find('description').text();
                }
                if (!x.name) {
                  x.name = $(data).find('title:first').text();
                }
              } else {
                if (data) {
                  x.name = data.title;
                }
              }
              created_item = link_model.create(x);
              x.id = created_item.id;
              notify_other_user(2, x);
              spinner.hide();
              reset_content();
              $scope.$apply();
            });
          }
        };
        $scope.update_link = function() {
          var data, spinner;
          data = Object.getPrototypeOf($scope.displayed_topic);
          if ($scope.displayed_topic.link !== data.link) {
            spinner = $foundry.spinner({
              type: 'loading',
              text: 'Fetching '
            });
            $('.close').on('click', function(evt) {
              return spinner.hide();
            });
            return $foundry.rss($scope.displayed_topic.link, function(data, err) {
              if (!err) {
                if ($(data).find('encoded').text()) {
                  $scope.displayed_topic.text = $(data).find('encoded').text();
                } else if ($(data).find('content').length && $(data).find('content').eq(0).prop('tagName') !== "media:content") {
                  $scope.displayed_topic.text = $(data).find('content').text();
                } else {
                  $scope.displayed_topic.text = $(data).find('description').text();
                }
                $scope.displayed_topic.name = $(data).find('title:first').text();
              } else {
                if (data) {
                  $scope.displayed_topic.name = data.name;
                }
                $scope.displayed_topic.text = '';
              }
              $scope.displayed_topic.save();
              $scope.clear();
              spinner.hide();
              return $scope.$apply();
            });
          } else {
            $scope.displayed_topic.save();
            return $scope.clear();
          }
        };
        $scope.delete_topic = function() {
          $scope.displayed_topic.destroy();
          $scope.topic_data = {};
          $scope.load();
          $scope.change_display(null, $scope.current_index);
          $('.modal').modal('hide');
        };

        /*
          input: type - the type of content, post or file or link
                 data - the data object
          ouput: email notification to all other user
          function: send email to all other user
         */
        notify_other_user = function(type, data) {
          var email_data;
          email_data = {
            subject: 'Forum: ' + data.name
          };
          switch (type) {
            case 1:
              email_data.content = generate_post_template(data);
              break;
            case 2:
              email_data.content = generate_link_template(data);
              break;
            case 3:
              email_data.content = generate_file_template(data);
          }
          return $foundry.gmail(email_data.subject, foundry._current_user.email, email_data.content, foundry._plugins.user.mail_list());
        };

        /*
          input: data - the data object
          ouput: email notification to author
          function: send email to author
         */
        notify_author = function(data, email) {
          var email_data;
          email_data = {
            subject: 'Forum Comment',
            content: generate_comment_template(data)
          };
          return $foundry.gmail(email_data.subject, email, email_data.content);
        };

        /*
          input: data object with use email and comment content
          output: html strings
          function: generate html template for comment
         */
        generate_comment_template = function(data) {
          var html, link, style;
          link = location.protocol + '//' + location.host + location.pathname + '?space=' + Nimbus.realtime.c_file.id + '&topic=' + $scope.displayed_topic.id;
          style = 'padding:10px;margin:10px;background-color:#1fa086;color:#fff;border-radius:2px;display:inline-block;';
          style += 'text-decoration:none;';
          html = '<div style="padding:20px;border:1px solid #ddd;max-width:100%"><h3>' + $scope.displayed_topic.name + '</h3>';
          html += '<p style="color: #999;padding: 5px 2px;border-bottom: 1px solid #ddd;">Sent From: <span>' + foundry._current_user.name + ' in ' + Nimbus.realtime.c_file.title + '</span><span style="float: right;">' + moment().format("YYYY-M-D") + '</span></p>';
          html += '<div style="max-width=100%">' + data.content + '</div>';
          return html += '</div><center style="margin-top=20px"><a href="' + link + '" style="' + style + '">Open in Forum</a></center></div>';
        };

        /*
          input: data object
          ouput: string
          function: generate template for post
         */
        generate_post_template = function(data) {
          var html, link, style;
          link = location.protocol + '//' + location.host + location.pathname + '?space=' + Nimbus.realtime.c_file.id + '&topic=' + data.id;
          style = 'padding:10px;margin:10px;background-color:#1fa086;color:#fff;border-radius:2px;display:inline-block;';
          style += 'text-decoration:none;';
          html = '<div style="max-width:100%"><div><h3>' + data.name + '</h3>';
          html += '<p style="color: #999;padding: 5px 2px;border-bottom: 1px solid #ddd;">Posted By: <span>' + foundry._current_user.name + ' in ' + Nimbus.realtime.c_file.title + '</span><span style="float: right;">' + moment().format("YYYY-M-D") + '</span></p>';
          html += '<div class="nimbusbase-email-html" style="max-width=100%">' + data.text + '</div>';
          return html += '</div><center style="margin-top=20px"><a href="' + link + '" style="' + style + '">Open in Forum</a></center></div>';
        };

        /*
          input: none
          ouput: string
          function: generate template for link
         */
        generate_link_template = function(data) {
          var html;
          html = '<div style="padding:30px 20px;border:1px solid #ddd;max-width:100%"><h3><a href="' + data.link + '">' + data.name + '</a></h3>';
          html += '<p style="color: #999;padding: 5px 2px;border-bottom: 1px solid #ddd;">Posted By: <span>' + foundry._current_user.name + ' in ' + Nimbus.realtime.c_file.title + '</span><span style="float: right;">' + moment().format("YYYY-M-D") + '</span></p>';
          html += '<span class="source"><img src="' + $scope.get_link_favicon(data.link) + '" class="favicon" width="16" height="16" style="vertical-align: middle;"> from <strong>' + $scope.get_link_domain(data.link) + ' ›</strong> </span>';
          html += "<div>" + (data.text || '') + "</div>";
          return html += '</div>';
        };

        /*
          input: none
          ouput: string
          function: generate template for file
         */
        generate_file_template = function(data) {
          var html, style;
          style = 'padding:10px;margin:10px;background-color:#1fa086;color:#fff;border-radius:2px;display:inline-block;';
          style += 'text-decoration:none;margin-left:0px;';
          html = '<div style="padding:30px 20px;border:1px solid #ddd;max-width:100%"><h3>' + data.name + '</h3>';
          html += '<p style="color: #999;padding: 5px 2px;border-bottom: 1px solid #ddd;">Posted By: <span>' + foundry._current_user.name + ' in ' + Nimbus.realtime.c_file.title + '</span><span style="float: right;">' + moment().format("YYYY-M-D") + '</span></p>';
          html += '<span><a href="' + data.attachment_link + '" style="' + style + '">Click to Download</a></span>';
          return html += '</div>';
        };

        /*·
        
        methods for comments and reply
        1. upload_attachment to deal with picture uploading in comment
        
        2. comment action to add the real comment data to model
        
        3. add_comment is the ng-click hanlder
         */
        upload_attachment = function(file, callback) {
          Nimbus.Binary.upload_file(file, function(f) {
            foundry._plugins.document.set(f.file_id, f._file);
            if (callback) {
              return callback(f);
            }
          });
        };
        comment_action = function(data) {
          var email, obj;
          obj = data;
          if ($scope.reply_mode) {
            $scope.reply_mode = false;
            if (!$scope.current_comment.replies) {
              $scope.current_comment.replies = [];
            }
            $scope.current_comment.replies.push(data);
            $scope.current_comment.save();
            email = foundry._user_list[$scope.current_comment.userid].email;
          } else {
            comment_model.create(data);
            email = foundry._user_list[$scope.displayed_topic.userid].email;
          }
          notify_author(obj, email);
          $scope.new_comment = '';
          return $scope.load();
        };
        $scope.add_comment = function(rss) {
          var c, id, spinner;
          id = $scope.displayed_topic.id;
          c = {
            userid: foundry._current_user.id,
            name: $scope.get_user_name(foundry._current_user.id),
            content: $scope.new_comment,
            post_id: id,
            created_at: Date().toString(),
            timestamp: new Date().getTime()
          };
          if ($scope.upload_comment) {
            spinner = $foundry.spinner({
              type: 'loading',
              text: 'Uploading... '
            });
            $scope.uplading_file = true;
            console.log('upload');
            upload_attachment($scope.upload_comment, function(file) {
              c.attachment = file.file_id;
              comment_action(c);
              spinner.hide();
              $scope.uplading_file = false;
              $scope.upload_comment = null;
              return $scope.$apply();
            });
          } else {
            console.log('create directly');
            comment_action(c);
          }
        };

        /*
          get attachment url with id
         */
        $scope.get_attachment_url = function(id) {
          var file;
          file = foundry._plugins.document.get(id);
          if (file) {
            return file.webContentLink;
          }
        };
        $scope.get_attachment = function(id) {
          if (id) {
            return foundry._plugins.document.get(id);
          }
        };

        /*
        
          methods for update post and links
         */
        $scope.update = function() {
          console.log("UPDATE displayed topic");
          $scope.displayed_topic.save();
          $scope.clear();
        };
        $scope.get_content_by_url = function(url) {
          return console.log('URL: ' + url);
        };
        $scope.get_user_pic = function(id) {
          var user, user_model;
          if (id === 10000) {
            return 'forum_avatar.jpg';
          }
          user_model = foundry._models.User;
          user = user_model.findByAttribute('pid', id);
          if (user) {
            return user.pic || 'photo.jpg';
          } else {
            return "empty.png";
          }
        };
        $scope.get_user_name = function(id) {
          var user, user_model;
          if (id === 10000) {
            return 'Forum';
          }
          user_model = foundry._models.User;
          user = user_model.findByAttribute('pid', id);
          if (user) {
            return user.name;
          } else {
            return "";
          }
        };
        $scope.get_current_user_pic = function() {
          if (foundry._current_user) {
            return $scope.get_user_pic(foundry._current_user.id) || 'photo.jpg';
          } else {
            return '';
          }
        };
        $scope.get_time_from_now = function(date, long) {
          if (long) {
            return moment(date).fromNow();
          } else {
            return moment(date).fromNow().replace("ago", "");
          }
        };
        foundry.share_user_retrieved = (function(_this) {
          return function() {
            return $scope.$apply();
          };
        })(this);
        $scope.get_link_domain = function(link) {
          return window.url('domain', link);
        };
        $scope.get_link_favicon = function(link) {
          var w;
          w = window.url('domain', link);
          return "http://www.google.com/s2/favicons?domain=" + w;
        };
        $scope.load();

        /*
        below is helper method for things like show spinner and add comment with Forum identity
         */

        /*
         */
        $scope.show_spinner = function(msg) {
          var spinner;
          spinner = $foundry.spinner({
            type: 'loading',
            text: msg
          });
          return spinner;
        };

        /*
         */
        $scope.log_comment = function(msg) {
          var comment;
          comment = {
            userid: foundry._current_user.id,
            name: foundry._current_user.name,
            content: msg,
            post_id: $scope.displayed_topic.id,
            created_at: Date().toString(),
            timestamp: new Date().getTime()
          };
          comment_model.create(comment);
          return $scope.load();
        };

        /*
          send_email_to_all is a simple wrapper for sending email to all other user
          or just one user
         */
        $scope.send_email_to_all = function(data) {
          var content;
          content = generate_post_template({
            name: data.subject,
            text: data.content,
            id: $scope.displayed_topic.id
          });
          return $foundry.gmail(data.subject, foundry._current_user.email, content, foundry._plugins.user.mail_list());
        };
        $scope.send_email_to = function(email, data) {
          var content;
          content = generate_post_template({
            name: data.subject,
            text: data.content,
            id: $scope.displayed_topic.id
          });
          return $foundry.gmail(data.subject, email, content);
        };

        /*
          input: component
          output: function used to show the add_shortcut
            of given component
          function: create such function
         */
        $scope.shortcut = function(component) {
          return function() {
            var postEditor, textarea;
            $scope.form_mode = 'create';
            $scope.form_config = component.formConfig;
            $("." + component.view.createModal.cssClass).modal();
            textarea = $("." + component.view.createModal.cssClass).find("textarea");
            if (textarea.length > 0 && typeof textarea.data("wysihtml5") !== 'undefined') {
              postEditor = textarea.data("wysihtml5").editor;
              postEditor.composer.setHistory([postEditor.composer.getValue()]);
            }
          };
        };

        /*
          input: component
          output: fucntion used to create a topic model instance
            of the component
          function: create such function
         */
        $scope.componentCreator = function(component) {
          return function(topic_data) {
            var created_item, x;
            if (topic_data) {
              x = topic_data;
            } else {
              x = $scope.topic_data;
            }

            /*
              these fields are defined in 
              doc_plugin.default_model_fields
             */
            if (!x.userid) {
              x.userid = foundry._current_user.id;
            }
            if (!x.created_at) {
              x.created_at = Date().toString();
            }
            if (!x.timestamp) {
              x.timestamp = new Date().getTime();
            }
            created_item = foundry._models[component.topicModel].create(x);
            x.id = created_item.id;
            $scope.topic_data = {};
            $scope.load();
            $('.modal').modal('hide');
            $scope.navigateToTopic(created_item);
            if (component.email_for_creation) {
              component.email_for_creation($scope, x);
            }
            x;
          };
        };
        for (_k = 0, _len2 = components.length; _k < _len2; _k++) {
          component = components[_k];
          component.onForumLoaded.apply({}, [$scope.componentScope[component.name], $foundry, $filter]);
        }
      }
    ]);
  };

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var define_controller;

  define('account', function(require) {
    var doc_plugin;
    return doc_plugin = {
      type: 'plugin',
      title: 'Account',
      anchor: '#/account',
      _models: {},
      name: 'account',
      version: 1.0,
      order: -14,
      icon: 'icon-cog',
      init: function() {
        foundry.initialized(this.name);
        define_controller();
      }
    };
  });

  define_controller = function() {
    return angular.module('foundry').controller('AccountController', [
      '$scope', '$rootScope', '$foundry', '$filter', function($scope, $rootScope, $foundry, $filter) {
        var plan_to_usernumber;
        $rootScope.breadcum = 'Account';
        $scope.current_user_role = foundry._user_list[foundry._current_user.id].role;
        plan_to_usernumber = {
          0: "10",
          1: "25",
          2: "50",
          3: "infinite"
        };
        $scope.get_plan = function() {
          return foundry._owner_plan;
        };
        $scope.usernumber = plan_to_usernumber[foundry._owner_plan];
        $scope.users = Nimbus.keys(foundry._user_list).length;
        $scope.is_current_plan = function(plan) {
          if (plan === $scope.get_plan()) {
            return 'current';
          } else if (plan > $scope.get_plan()) {
            return 'up';
          } else {
            return 'down';
          }
        };
        if (foundry.get_setting("email") == null) {
          $scope.setting_email = true;
        } else {
          $scope.setting_email = foundry.get_setting("email");
        }
        $scope.setting_email_change = function(status) {
          console.log("called");
          return foundry.set_setting("email", status);
        };
        return window.a_scope = $scope;
      }
    ]);
  };

}).call(this);
