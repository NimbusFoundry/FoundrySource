// Generated by CoffeeScript 1.8.0
(function() {
  if (localStorage["version"] == null) {
    localStorage["version"] = "google";
    window.location.reload();
  }

  foundry.supportEmail = 'admin@nimbusfoundry.com, admin@nimbusbase.com';

  foundry.angular.dependency = [];

  define('config', function() {
    var config;
    config = {};
    config.appName = 'Forum';
    config.plugins = {
      forum: 'app/plugins/forum',
      account: 'app/plugins/account',
      document: 'core/plugins/document',
      user: 'core/plugins/user',
      workspace: 'core/plugins/workspace',
      support: 'core/plugins/support'
    };
    return config;
  });

  foundry.load_plugins();

  Nimbus.Auth.setup({
    'GDrive': {
      'app_id': '965255374748',
      'key': '965255374748-s2ln5arng133cj8goqu0s6gvfsp2to99.apps.googleusercontent.com',
      "scope": "openid https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/plus.me https://www.googleapis.com/auth/gmail.compose https://www.googleapis.com/auth/gmail.modify https://apps-apis.google.com/a/feeds/domain/"
    },
    "app_name": "forum",
    'synchronous': false,
    'DynamoDB': {
      'Google': {
        'app_id': '195693500289',
        'client_id': '195693500289.apps.googleusercontent.com',
        "scope": "https://www.googleapis.com/auth/plus.login"
      },
      "app_name": "N05FC192-A6CF-B6BD94C3",
      "region": "us-west-2"
    }
  });

  Nimbus.Auth.authorized_callback = function() {
    if (Nimbus.Auth.authorized()) {
      return $("#login_buttons").addClass("redirect");
    }
  };

  foundry.ready(function() {
    var checkGooglePermission, config, state;
    config = foundry.parse_open_url();
    if (config) {
      if (config.space) {
        localStorage.last_open_workspace = config.space;
      }
      if (config.topic) {
        localStorage.to_open_topic = config.topic;
      }
      state = {
        title: document.title,
        url: location.href.replace(location.search, ''),
        otherkey: {}
      };
      window.history.pushState(state, document.title, state.url);
    }
    console.log('ready: ' + Nimbus.Auth.authorized());
    checkGooglePermission = function(type) {
      return function() {
        if (typeof arguments[0] === 'object' && (arguments[0].code === 401 || arguments[0].code === 403)) {
          console.log(type + " perimission not granted.");
          foundry.logout();
          return location.reload();
        }
      };
    };
    if (Nimbus.Auth.authorized()) {
      gapi.client.load('gmail', 'v1', function() {
        console.log("Gmail loaded");
        return foundry.init(function() {
          gapi.client.gmail.users.messages.modify({
            id: "not_exist",
            userId: "me"
          }).execute(checkGooglePermission("gmail.modify"));
          gapi.client.gmail.users.messages.send({
            userId: 'me'
          }).execute(checkGooglePermission("gmail.send"));
          $('#loading').addClass('loaded');
          return $("#login_buttons").removeClass("redirect");
        });
      });
    }
  });

  window.mailTasks = [];

  require(['dist/mailComposer.min'], function(composeFun) {
    var task, _i, _len, _ref, _results;
    window.composeMail = composeFun;
    if (window.mailTasks.length) {
      _ref = window.mailTasks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        task = _ref[_i];
        _results.push(composeFun(task.data, task.callback));
      }
      return _results;
    }
  });

  $(document).ready(function() {
    $('#google_login').on('click', function(evt) {
      if (!(localStorage["version"] === "google")) {
        localStorage["version"] = "google";
        window.location.reload();
      }
      return Nimbus.Auth.authorize('GDrive');
    });
    $('#aws_login').on('click', function(evt) {
      if (!(localStorage["version"] === "aws")) {
        localStorage["version"] = "aws";
        window.location.reload();
      }
      return Nimbus.Auth.authorize('DynamoDB', "Google");
    });
    $('.logout_btn').on('click', function(evt) {
      foundry.logout();
      return location.reload();
    });
  });

}).call(this);
