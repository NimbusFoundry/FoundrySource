// Generated by CoffeeScript 1.8.0
(function() {
  var define_controller;

  define('document', function(require) {
    var doc_plugin;
    return doc_plugin = {
      type: 'plugin',
      title: 'Document',
      anchor: '#/document',
      name: 'document',
      version: 1.0,
      order: -10,
      icon: 'icon-file',
      controller_scope: null,
      init: function() {
        var attributes, name, self;
        self = this;
        name = 'Document';
        attributes = ["id", "title", "timestamp"];
        foundry.model(name, attributes, function(model) {
          model.onUpdate(function(mode, obj, isLocal) {
            if (mode === 'CREATE' && !isLocal) {
              return self.all_file(function() {
                if (self.controller_scope) {
                  self.controller_scope.load();
                  return self.controller_scope.$apply();
                }
              });
            }
          });
          return self.all_file(function() {
            return foundry.initialized(self.name);
          });
        });
        define_controller();
      },
      all_file: function(callback) {
        var self;
        self = this;
        if (Nimbus.realtime.folder) {
          return Nimbus.Client.GDrive.getMetadataList("'" + Nimbus.realtime.folder.binary_files.id + "' in parents", function(data) {
            self._documents = window.create_object_dictionary(data.items);
            if (callback) {
              callback(data.items);
            }
          });
        } else {
          return [];
        }
      },
      upload_file: function(file, callback) {
        return Nimbus.Binary.upload_file(file, function(f) {
          if (callback) {
            return callback(f);
          }
        });
      },
      delete_file: function(doc, callback) {
        var model;
        Nimbus.Client.GDrive.deleteFile(doc.id);
        delete this._documents[doc.id];
        model = foundry._models.Document;
        doc = model.findByAttribute('id', doc.id);
        if (doc) {
          doc.destroy();
        }
        if (callback) {
          return callback();
        }
      },
      get: function(id) {
        return this._documents[id];
      },
      set: function(id, data) {
        var doc, model;
        if (!this._documents[id]) {
          this._documents[id] = data;
          model = foundry._models.Document;
          doc = model.create({
            title: data.title,
            id: data.id,
            timestamp: new Date().getTime()
          });
          doc.save();
        }
      }
    };
  });

  define_controller = function() {
    return angular.module('foundry').controller('DocumentController', [
      '$scope', '$rootScope', 'ngDialog', '$foundry', '$timeout', function($scope, $rootScope, ngDialog, $foundry, $timeout) {
        var file_module;
        $rootScope.breadcum = 'Documents';
        file_module = foundry.load('document');
        file_module.controller_scope = $scope;
        $scope.load = function(callback) {
          $scope.files = file_module._documents;
          if (callback) {
            callback();
          }
        };
        $scope.choosed_file = null;
        $scope.upload_document = function() {
          var spinner;
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Uploading '
          });
          Nimbus.Binary.upload_file($scope.choosed_file, function(file) {
            file_module.set(file._file.id, file._file);
            $scope.choosed_file = null;
            $scope.load();
            $scope.$apply();
            return spinner.hide();
          });
        };
        $scope.delete_document = function(file) {
          var spinner;
          spinner = $foundry.spinner({
            type: 'loading',
            text: 'Deleteing...'
          });
          return file_module.delete_file(file, function() {
            console.log('deleting file');
            return $timeout(function() {
              return $scope.load(function() {
                return spinner.hide();
              });
            }, 3000);
          });
        };
        $scope.load();
      }
    ]);
  };

}).call(this);
