// Generated by CoffeeScript 1.8.0

/*
    angular directives
 */

(function() {
  angular.module('foundry-ui', ['ngDialog']).directive('enEditor', [
    '$parse', '$timeout', function($parse, $timeout) {
      return function(scope, elm, attrs) {
        var composer, editor, iframe, update, value;
        value = $parse(attrs.ngModel)(scope);
        update = function() {
          var getter, setter;
          getter = $parse(elm.attr('ng-model'));
          setter = getter.assign;
          setter(angular.element(elm).scope(), $(elm).val());

          /*
              compare the value if is the same, we should not update.
           */
          return $timeout(function() {
            return angular.element(elm).scope().$apply();
          }, 0);
        };
        editor = $(elm).wysihtml5($.extend(foundry.wysiwygOptions, {
          stylesheets: [],
          events: {
            'change': update,
            'blur': update
          }
        }));
        scope.$watch(attrs.ngModel, function(value) {
          if (!value) {
            value = '';
          }
          if (value !== $(elm).data("wysihtml5").editor.composer.getValue()) {
            $(elm).data("wysihtml5").editor.composer.setValue(value);
          }
        }, true);
        iframe = $(elm).data("wysihtml5").editor.currentView.iframe;
        composer = $(elm).data("wysihtml5").editor.composer;
        $(iframe).on('load', function() {
          $(iframe.contentDocument.body).on('keydown', function(evt) {
            if (evt.keyCode === 13) {
              composer.selectedNodeBeforeReturn = composer.selection.getSelectedNode();
              return composer.commands.exec("insertHTML", '<br>');
            }
          });
          return $(iframe.contentDocument.body).on('paste', function(evt) {
            console.log('pasted');
            return evt.stopPropagation();
          });
        });
        if (!value) {
          value = '';
        }
        $(elm).data("wysihtml5").editor.composer.setValue(value);
      };
    }
  ]).directive('modelForm', [
    '$compile', '$parse', function($compile, $parse) {
      return {
        restrict: 'E',
        compile: function(tElement, tAttr) {
          return function(scope, element, attrs) {
            var content, create_method, html, instance, k, key, mode, model, random, update_method, v, value, _ref, _ref1;
            random = Math.floor(Math.random() * 1000000000);
            instance = attrs['instanceName'];
            model = attrs['modelName'];
            create_method = scope[model].create;
            update_method = scope[model].update;
            html = '<form>';
            mode = attrs['formMode'];
            _ref = scope[model].fields;
            for (key in _ref) {
              value = _ref[key];
              html += '<div class="nimb_form' + (" " + value.type) + '"';
              if (value.show) {
                html += 'ng-show="' + value.show + '"';
              }
              if (value.hide) {
                html += 'ng-hide="' + value.hide + '"';
              }
              html += '>';
              html += '<label for="' + instance + '.' + key + random + '">' + value.label + '</label>';
              switch (value.type) {
                case 'input':
                  html += '<input type="text" id="' + instance + '.' + key + random + '" ng-model="' + instance + '.' + key + '">';
                  break;
                case 'select':
                  html += '<select ng-model="' + instance + '.' + key + '">';
                  _ref1 = value.options;
                  for (k in _ref1) {
                    v = _ref1[k];
                    html += '<option ng-selected="' + model + '.' + key + '.value == ' + v + '" value="' + v + '">' + k + '</option>';
                  }
                  html += '</select>';
                  break;
                case 'checkbox':
                  html += '<div class="checker"><span><input style="margin-top:0px;margin-right:10px;" type="checkbox" ng-model="' + instance + '.' + key + '" >' + value.text + '</span></div><br>';
                  break;
                case 'text':
                  html += '<textarea id="' + instance + '.' + key + random + '" ng-model="' + instance + '.' + key + '"></textarea>';
                  break;
                case 'editor':
                  html += '<textarea style="" en-editor ng-model="' + instance + '.' + key + '">{{' + instance + '[key]}}</textarea>';
                  break;
                case 'list':
                  html += '<span ng-init="' + instance + '.' + key + '=[]||' + instance + '.' + key + '"></span>';
                  html += '<tags-input custom-class="bootstrap" type="text" ng-model="' + instance + '.' + key + '"></tags-input>';
                  break;
                case 'radio':
                  html += '<div><label ng-repeat="(k,v) in ' + model + '.' + key + '.options">';
                  html += '<input name="' + instance + '.' + key + '" style="margin-top: -4px;margin-right: 5px;" type="radio" value="{{v}}" ng-model="' + instance + '.' + key + '"> {{k}}<br />';
                  html += '</label></div>';
                  break;
                case 'file':
                  html += '<span class="btn outline btn-file"><input type="file" form-file en-model="' + instance + '.' + key + '" class="fileupload">Choose File</span>';
                  html += '<span class="btn btn-danger" ng-show="' + instance + '.' + key + '" ng-click="' + instance + '.' + key + '=null">Clear</span>';
                  html += '<p class="file_attach">{{' + instance + '.' + key + '.name}}</p>';
                  break;
                case 'date_time':
                  html += '<input class="datetimepicker" en-date type="text" ng-model="' + instance + '.' + key + '">';
              }
              html += '</div>';
            }
            html += '<button ng-show="' + mode + '==' + "'" + 'edit' + "'" + '" class="btn btn-success update_button" ng-click="' + update_method + '">Update</button>';
            html += '<button ng-show="' + mode + '==' + "'" + 'create' + "'" + '" class="btn btn-primary create_button" ng-click="' + create_method + '">Create</button>';
            html += '</form>';
            content = $compile(html)(scope);
            element.replaceWith(content);
          };
        }
      };
    }
  ]).directive('enList', [
    '$compile', '$timeout', '$parse', function($compile, $timeout, $parse) {
      return function(scope, elm, attrs) {
        $timeout(function() {
          return $(elm).simpleTagger();
        }, 300);
        scope.$watch(attrs.ngModel, function(oldValue, newValue) {
          return console.log('new value');
        });
        return console.log('list directive');
      };
    }
  ]).directive('userInfo', [
    '$compile', function($compile) {
      return {
        restrict: 'E',
        compile: function(tElement, tAttr) {
          return function(scope, element, attrs) {
            return console.log($compile);
          };
        }
      };
    }
  ]).directive("fileread", [
    function() {
      return {
        link: function($scope, element, attrs) {
          element.bind("change", function(evt) {
            if (attrs.enModel) {
              $scope[attrs.enModel] = evt.target.files[0];
              return $scope.$apply();
            }
          });
          element.on('click', function(evt) {
            return evt.stopPropagation();
          });
        }
      };
    }
  ]).directive('formFile', [
    '$parse', function($parse) {
      return function(scope, elm, attrs) {
        var changed, setter;
        setter = 'test';
        changed = function(evt) {
          var getter;
          if (attrs.enModel) {
            getter = $parse(attrs.enModel);
            setter = getter.assign;
            setter(scope, evt.target.files[0]);
            return scope.$apply();
          }
        };
        return elm.bind("change", changed);
      };
    }
  ]).factory('$foundry', [
    '$http', function($http) {
      var service;
      service = {
        email: function() {
          var mailgun;
          console.log('email');
          mailgun = function(type, value, content, bcc, cc) {
            var form_data;
            form_data = {
              'from': encodeURIComponent('NimbusBase <me@nimbusbase.com>'),
              'to': encodeURIComponent(value),
              'subject': encodeURIComponent(type),
              'html': encodeURIComponent(content)
            };
            if (bcc) {
              form_data['bcc'] = encodeURIComponent(bcc);
            }
            if (cc) {
              form_data['cc'] = encodeURIComponent(cc);
            }
            return $.ajax({
              url: 'http://192.241.167.76:3000/api.mailgun.net/v2/nimbusbase.com/messages',
              method: 'post',
              beforeSend: function(request) {
                return request.setRequestHeader("Authorization", "Basic  YXBpOmtleS04c3RvbXM1eGwtaHRuZGFoMmZsNGNycG9vaTN0bnllMg==");
              },
              data: form_data,
              success: function(data) {
                return console.log(data);
              }
            });
          };
          return mailgun.apply(this, arguments);
        },
        gmail: function(subject, to, content, cc, bcc) {
          var base64EncodedEmail, data, mailCallback, sendMessage;
          if (cc == null) {
            cc = '';
          }
          if (bcc == null) {
            bcc = '';
          }
          base64EncodedEmail = "";
          sendMessage = function(email, callback) {
            var request;
            base64EncodedEmail = base64EncArr(strToUTF8Arr(email)).replace(/\//g, "_").replace(/\+/g, "-");
            request = gapi.client.gmail.users.messages.send({
              'userId': 'me',
              'raw': base64EncodedEmail
            });
            return request.execute(callback);
          };
          mailCallback = function(error, email) {
            var currentUserEmail;
            if (error) {
              console.log(error);
              return;
            }
            currentUserEmail = foundry._current_user.email;
            return sendMessage(email, function() {
              var cto, originalCc, retry, toList, _i, _len, _results;
              console.log(arguments);
              if (arguments[0].code === 400 && arguments[0].message === "Invalid cc header") {
                console.log("sent failure for multiple cc, try to send email one by one");
                retry = true;
                originalCc = data.cc;
                data.cc = null;
                window.composeMail(data, mailCallback);
                toList = originalCc.split(",");
                _results = [];
                for (_i = 0, _len = toList.length; _i < _len; _i++) {
                  cto = toList[_i];
                  data.to = cto;
                  _results.push(window.composeMail(data, mailCallback));
                }
                return _results;
              }

              /*if arguments[0].id
                  if to.indexOf(currentUserEmail)>=0 or bcc.indexOf(currentUserEmail)>=0 or cc.indexOf(currentUserEmail)>=0
                      gapi.client.request({
                          path:"gmail/v1/users/me/messages/#{arguments[0].id}/modify"
                          method: "POST"
                          body:"{\"addLabelIds\": [\"UNREAD\",\"INBOX\"]}"
                          callback: () ->
                              console.log ("gmail sent to self")
                              console.log(arguments)
                      })
               */
            });
          };
          data = {
            'from': "'" + foundry._current_user.name + "'<" + foundry._current_user.email + ">",
            'to': to,
            'cc': cc,
            'bcc': bcc,
            'subject': subject,
            'html': content
          };
          if (window.composeMail) {
            return window.composeMail(data, mailCallback);
          } else {
            return window.mailTasks.push(data, mailCallback);
          }
        },
        validate: function(emal, callback) {
          console.log('validation');
          return Nimbus.Share.add_share_user_real(email, function(user) {
            var is_valid;
            is_valid = user.name ? true : false;
            Nimbus.Share.remove_share_user_real(user.id, function(res) {
              return callback(is_valid);
            });
          });
        },
        spinner: function(config) {
          var data, opts, spinner, target;
          data = {
            text: config.text
          };
          switch (config.type) {
            case 'loading':
              opts = {
                lines: 13,
                length: 11,
                width: 5,
                radius: 17,
                corners: 1,
                rotate: 0,
                color: '#FFF',
                speed: 1,
                trail: 60,
                shadow: false,
                hwaccel: false,
                className: 'spinner',
                zIndex: 2e9,
                top: 'auto',
                left: 'auto'
              };
              target = document.createElement("div");
              document.body.appendChild(target);
              spinner = new Spinner(opts).spin(target);
              data.spinner = spinner;
              break;
            case 'sucess':
              data.icon = 'img/check.png';
              break;
            case 'error':
              data.icon = 'img/cross.png';
          }
          return iosOverlay(data);
        },
        rss: function(url, callback) {
          var buildUrl, callbackWhenMatch, httpsProxyUrl, matchArticle, proxyUrl, retrieveArticle;
          proxyUrl = httpsProxyUrl = 'http://192.241.167.76:9292/';
          callbackWhenMatch = null;
          buildUrl = function(str) {
            var https;
            https = str.indexOf('https://');
            if (https === -1) {
              str = proxyUrl + str.replace('http://', '');
            } else {
              str = httpsProxyUrl + str.replace('https://', '');
            }
            return str;
          };
          matchArticle = function(options) {
            var article, callbackOrNot, listUrl, title;
            article = options.rss;
            listUrl = options.url;
            callbackOrNot = options.callback;
            title = options.title;
            return $.ajax({
              url: buildUrl(listUrl),
              dataType: 'xml',
              success: function(data) {
                var error, item, list, obj, _i, _len;
                list = $(data).find('item');
                if (list.length === 0) {
                  list = $(data).find('entry');
                }
                obj = null;
                error = true;
                for (_i = 0, _len = list.length; _i < _len; _i++) {
                  item = list[_i];
                  if ($(item).find('link').text().indexOf(article) !== -1) {
                    obj = item;
                    error = false;
                    break;
                  }
                  if (title && title.indexOf($(item).find('title').text()) !== -1) {
                    obj = item;
                    error = false;
                    break;
                  }
                }
                if (error) {
                  obj = {
                    'title': title
                  };
                }
                if (callbackOrNot) {
                  return callbackWhenMatch(obj, error);
                }
              },
              error: function(req, text) {
                var data, error, item, list, obj, _i, _len;
                console.log(req, text);
                data = null;
                if (text === 'parsererror') {
                  data = $(req.responseText);
                }
                list = $(data).find('item');
                if (list.length === 0) {
                  list = $(data).find('entry');
                }
                obj = null;
                error = true;
                for (_i = 0, _len = list.length; _i < _len; _i++) {
                  item = list[_i];
                  if ($(item).find('link').text().indexOf(article) !== -1) {
                    obj = item;
                    error = false;
                    break;
                  }
                  if (title && title.indexOf($(item).find('title').text()) !== -1) {
                    obj = item;
                    error = false;
                    break;
                  }
                }
                if (error) {
                  obj = {
                    'title': title
                  };
                }
                if (callbackOrNot) {
                  return callbackWhenMatch(obj, error);
                }
              }
            });
          };
          retrieveArticle = function(rss, callback) {
            var str;
            str = buildUrl(rss);
            callbackWhenMatch = callback;
            return $.ajax({
              url: str,
              async: false,
              dataType: 'html',
              success: function(data) {
                var listUrl, match, options, titleMatch;
                titleMatch = /<title>([\s\S]*)<\/title>/.exec(data);
                match = /application\/rss\+xml.*href=['"](.*)['"]/.exec(data);
                if (match && match.length >= 2) {
                  listUrl = match[1];
                  if (listUrl.indexOf('feedburner.com') !== -1) {
                    listUrl = listUrl + '?format=xml';
                  }
                  options = {
                    'url': listUrl,
                    'rss': rss,
                    'title': titleMatch[1] || '',
                    'callback': true
                  };
                  return matchArticle(options);
                } else {
                  console.log('error when get this site');
                  data = {
                    title: titleMatch[1] || ''
                  };
                  return callbackWhenMatch(data, true);
                }
              },
              error: function(data) {
                console.log(data);
                return callbackWhenMatch(null, true);
              }
            });
          };
          retrieveArticle(url, callback);
        }
      };
      return service;
    }
  ]).directive('enCalendar', [
    '$parse', function($parse) {
      var link;
      link = function(scope, elm, attrs) {
        var config;
        config = {};
        if (attrs['enClick']) {
          config.action = function(evt) {
            var id;
            id = evt.target.id.replace('_day', '');
            $(elm).find('.current_date').removeClass('current_date');
            $('#' + id).addClass('current_date');
            scope.show_date.call(scope, evt);
            return scope.$apply();
          };
        }
        $(elm).zabuto_calendar(config);
        scope.$watch('selected_date', function(n, o) {
          if (!n || n === '') {
            return $(elm).find('.current_date').removeClass('current_date');
          }
        });
      };
      return {
        link: link
      };
    }
  ]).directive('bindHtmlUnsafe', [
    '$compile', function($compile) {
      return function($scope, $element, $attrs) {
        var compile, htmlName;
        compile = function(newHTML) {
          if (newHTML) {
            newHTML = newHTML.replace(/\n/g, '<br>');
          }
          return $element.html('').append(newHTML);
        };
        htmlName = $attrs.bindHtmlUnsafe;
        return $scope.$watch(htmlName, function(newHTML, oldHTML) {
          return compile(newHTML);
        });
      };
    }
  ]).directive('confirm', [
    '$compile', function($compile) {
      return {
        link: function($scope, elm, attrs) {
          return elm.bind('click', function(evt) {
            var content, html, onCancel, onConfirm;
            onConfirm = attrs['onConfirm'];
            onCancel = attrs['onCancel'] ? attrs['onCancel'] : '';
            html = '<div class="wrapper dismiss_containter"><form>';
            html += '<div class="m-t-lg text-right"><button style="margin-right:5px" en-dismiss ng-click="' + onConfirm + '" class="btn btn-success">Yes</button>';
            html += '<button class="btn btn-danger bootbox-close-button" en-dismiss ng-click="' + onCancel + '">No</button></div>';
            html += '</form></div>';
            content = $compile(html)($scope);
            bootbox.dialog({
              'title': 'Are you sure you want to do this?',
              'className': "nimbus_confirm_modal",
              'message': content
            });
          });
        }
      };
    }
  ]).directive('enDismiss', function() {
    return function(scope, elm, attrs) {
      return elm.bind('click', function(evt) {
        return bootbox.hideAll();
      });
    };
  }).directive('subexternal', function() {
    return {
      link: function(scope, elm, attrs) {
        return elm.delegate('a', 'click', function(evt) {
          var targetURL;
          if (!this.href || this.href.indexOf('#') === 0) {
            return;
          }
          evt.preventDefault();
          targetURL = this.href;
          return window.open(targetURL, "_blank");
        });
      }
    };
  }).directive('enDate', function() {
    return function(scope, elm, attrs) {
      return $(elm).datetimepicker();
    };
  }).directive('enEditInPlace', [
    '$parse', '$compile', function($parse, $compile) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, elm, attrs, ngModel) {
          var edit, listener;
          edit = $("<div contentEditable='true' class='temp tasks-list-desc editable-cell' style='top:0px;text-decoration:none'></div>");
          listener = function(evt) {
            var editable, value;
            value = $parse(attrs['ngModel'])(scope);
            editable = $parse(attrs['enableEdit'])(scope);
            evt.stopPropagation();
            if (editable) {
              return;
            }
            elm.after(edit.html(value)).hide();
            edit.focus();
            edit.on('blur', function(evt) {
              return elm.show().next('.temp').remove();
            });
            return edit.on('keydown', function(evt) {
              if (evt.keyCode === 13) {
                scope.$apply(function() {
                  return elm.controller('ngModel').$setViewValue(edit.text());
                });
                return elm.show().next('.temp').remove();
              }
            });
          };
          elm.on('click', listener);
        }
      };
    }
  ]).directive('enZoom', [
    function() {
      return function(scope, elm, attrs) {
        var url;
        url = attrs['enZoom'];
        return elm.on('click', function(evt) {
          var html, modal;
          html = '<div class="image-zoomed todo-image-zoomed">';
          html += "<img src='" + url + "' />";
          html += '<div class="backdrop"></div>';
          html += '</div>';
          modal = $(html);
          modal.on('click', function(evt) {
            return $(this).fadeOut(function() {
              return $(this).remove();
            });
          });
          return $('body').append(modal.fadeIn());
        });
      };
    }
  ]).directive('imgZoom', function() {
    return {
      link: function(scope, elm, attrs) {
        var show_pop_up;
        elm.delegate('img', 'mouseenter', function(evt) {
          var link, url;
          url = evt.target.src;
          link = "<div class='mask'></div><a class='zoom-action-button' data-src='" + url + "'><i class='icon icon-zoom-in'></i></a>";
          $(evt.target).wrap('<p class="image-zoom-container"></p>');
          return $(evt.target).parent().append(link);
        });
        elm.delegate('img', 'mouseleave', function(evt) {
          $(evt.target).children('a,div.mask').remove();
          $(evt.target).siblings('a,div.mask').remove();
          return $(evt.target).unwrap();
        });
        elm.delegate('.zoom-action-button', 'click', function(evt) {
          var url;
          url = $(evt.target).data('src');
          return show_pop_up(url);
        });
        show_pop_up = function(url) {
          var html, modal;
          html = '<div class="image-zoomed todo-image-zoomed">';
          html += "<img src='" + url + "' />";
          html += '<div class="backdrop"></div>';
          html += '</div>';
          modal = $(html);
          modal.on('click', function(evt) {
            return $(this).fadeOut(function() {
              return $(this).remove();
            });
          });
          return $('body').append(modal.fadeIn());
        };
        return console.log('in link stage');
      }
    };
  }).directive('subZoom', function() {
    return function(scope, elm, attrs) {
      var show_pop_up;
      elm.delegate('img', 'click', function(evt) {
        var url;
        url = evt.target.src;
        return show_pop_up(url);
      });
      return show_pop_up = function(url) {
        var html, modal;
        html = '<div class="image-zoomed todo-image-zoomed">';
        html += "<img src='" + url + "' />";
        html += '<div class="backdrop"></div>';
        html += '</div>';
        modal = $(html);
        modal.on('click', function(evt) {
          return $(this).fadeOut(function() {
            return $(this).remove();
          });
        });
        return $('body').append(modal.fadeIn());
      };
    };
  }).directive('rssFeed', function() {
    return function(scope, elm, attrs) {};
  });

  angular.module("foundry-ui").directive("enFile", [
    '$parse', function($parse) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          element.on("change", function(evt) {
            var setter;
            if (attrs.enModel) {
              setter = $parse(attrs.enModel).assign;
              setter(scope, evt.target.files[0]);
            }
            return scope.$apply();
          });
          element.on('click', function(evt) {
            return evt.stopPropagation();
          });
        }
      };
    }
  ]);

}).call(this);
